/* tslint:disable */
/* eslint-disable */
/*
Visier Permission Management APIs

Visier APIs for managing permissions within an organization

The version of the OpenAPI document: 22222222.99201.1200


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CapabilityDTO } from '../models';
// @ts-ignore
import { ContentPackageDTO } from '../models';
// @ts-ignore
import { GetCapabilitiesAPIResponseDTO } from '../models';
// @ts-ignore
import { GetContentPackagesAPIResponseDTO } from '../models';
// @ts-ignore
import { GetDataSecurityObjectsAPIResponseDTO } from '../models';
// @ts-ignore
import { GetPermissionsAPIResponseDTO } from '../models';
// @ts-ignore
import { PermissionBulkOperationResponseDTO } from '../models';
// @ts-ignore
import { PermissionDTO } from '../models';
// @ts-ignore
import { PermissionsListDTO } from '../models';
// @ts-ignore
import { Status } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PermissionManagementApi - axios parameter creator
 * @export
 */
export const PermissionManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows you to create new permissions. Administrating tenant users can specify the tenant in which to add these permissions.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Create permissions
         * @param {PermissionsListDTO} permissionsListDTO 
         * @param {string} [tenantCode] Specify the tenant to create permissions in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPermissions: async (permissionsListDTO: PermissionsListDTO, tenantCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'permissionsListDTO' is not null or undefined
            assertParamExists('createPermissions', 'permissionsListDTO', permissionsListDTO)
            const localVarPath = `/v1/admin/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: permissionsListDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/permissions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(permissionsListDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to delete existing permissions.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Delete permissions
         * @param {string} body 
         * @param {string} [tenantCode] Specify the tenant to delete permissions from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePermissions: async (body: string, tenantCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('deletePermissions', 'body', body)
            const localVarPath = `/v1/admin/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/permissions',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to retrieve all the permission capabilities in your tenant.  You can use the returned capabilities in other API calls when creating or updating permissions to assign the capability to the permission.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a list of all permission capabilities
         * @param {string} [tenantCode] Specify the tenant to retrieve the capabilities from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCapabilities: async (tenantCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/capabilities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/capabilities',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to retrieve the details of a specific capability.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a permission capability\'s details
         * @param {string} capabilityId The unique identifier of the capability you want to retrieve.
         * @param {string} [tenantCode] Specify the tenant to retrieve a capability from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCapability: async (capabilityId: string, tenantCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'capabilityId' is not null or undefined
            assertParamExists('getCapability', 'capabilityId', capabilityId)
            const localVarPath = `/v1/admin/capabilities/{capabilityId}`
                .replace(`{${"capabilityId"}}`, encodeURIComponent(String(capabilityId !== undefined ? capabilityId : `-capabilityId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/capabilities/{capabilityId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to retrieve the details of a specific content package.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a content package\'s details
         * @param {string} contentPackageId The unique identifier of the content package you want to retrieve.
         * @param {string} [tenantCode] Specify the tenant to retrieve a content package from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentPackage: async (contentPackageId: string, tenantCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentPackageId' is not null or undefined
            assertParamExists('getContentPackage', 'contentPackageId', contentPackageId)
            const localVarPath = `/v1/admin/content-packages/{contentPackageId}`
                .replace(`{${"contentPackageId"}}`, encodeURIComponent(String(contentPackageId !== undefined ? contentPackageId : `-contentPackageId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/content-packages/{contentPackageId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to retrieve the list of available content packages.  You can use the returned content packages in other API calls when creating or updating permissions to add the content package to the permission.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a list of all content packages
         * @param {string} [tenantCode] Specify the tenant to retrieve the content packages from.
         * @param {string} [searchString] Optional search string to return only content packages whose display name or description contains that search string.  If searchString is empty or not provided, the response returns a list of all content packages.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentPackages: async (tenantCode?: string, searchString?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/content-packages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }

            if (searchString !== undefined) {
                localVarQueryParameter['searchString'] = searchString;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/content-packages',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to retrieve the list of available data security objects.  Data security objects are analytic objects and their related objects that are available to define  permissions’ data security profiles.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a list of data security objects
         * @param {Array<string>} [id] The unique identifiers of the data security objects (analytic objects) to retrieve.  Default is all data security objects.
         * @param {boolean} [includeDetails] If true, the response includes the analytic objects (display name, ID, and object type), related objects,  securable properties, and securable dimensions. If false, the response only includes analytic objects  (display name, ID, and object type). Default is false.
         * @param {string} [tenantCode] Specify the tenant to retrieve data security objects from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSecurityObjects: async (id?: Array<string>, includeDetails?: boolean, tenantCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/data-security-objects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (includeDetails !== undefined) {
                localVarQueryParameter['includeDetails'] = includeDetails;
            }

            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/data-security-objects',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to retrieve the details for a specified permission.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a permission\'s details
         * @param {string} permissionId The unique identifier of the permission you want to retrieve.
         * @param {string} [tenantCode] Specify the tenant to retrieve a permission from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermission: async (permissionId: string, tenantCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'permissionId' is not null or undefined
            assertParamExists('getPermission', 'permissionId', permissionId)
            const localVarPath = `/v1/admin/permissions/{permissionId}`
                .replace(`{${"permissionId"}}`, encodeURIComponent(String(permissionId !== undefined ? permissionId : `-permissionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/permissions/{permissionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to retrieve the full list of user permissions in your tenant.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a list of all permissions
         * @param {string} [tenantCode] Specify the tenant to retrieve the permissions from.
         * @param {boolean} [includeDetails] If true, returns the permission\&#39;s details. If false, only returns the permissions\&#39; ID, display name,  and description. Default is false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissions: async (tenantCode?: string, includeDetails?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }

            if (includeDetails !== undefined) {
                localVarQueryParameter['includeDetails'] = includeDetails;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/permissions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to update existing permissions.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Update permissions
         * @param {PermissionsListDTO} permissionsListDTO 
         * @param {string} [tenantCode] Specify the tenant to update permissions in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePermissions: async (permissionsListDTO: PermissionsListDTO, tenantCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'permissionsListDTO' is not null or undefined
            assertParamExists('updatePermissions', 'permissionsListDTO', permissionsListDTO)
            const localVarPath = `/v1/admin/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantCode !== undefined) {
                localVarQueryParameter['tenantCode'] = tenantCode;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: permissionsListDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/permissions',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(permissionsListDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermissionManagementApi - functional programming interface
 * @export
 */
export const PermissionManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PermissionManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows you to create new permissions. Administrating tenant users can specify the tenant in which to add these permissions.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Create permissions
         * @param {PermissionManagementApiCreatePermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPermissions(requestParameters: PermissionManagementApiCreatePermissionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermissionBulkOperationResponseDTO>> {
            const permissionsListDTO: PermissionsListDTO = {
                permissions: requestParameters.permissions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPermissions(permissionsListDTO, requestParameters.tenantCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to delete existing permissions.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Delete permissions
         * @param {PermissionManagementApiDeletePermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePermissions(requestParameters: PermissionManagementApiDeletePermissionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermissionBulkOperationResponseDTO>> {
            const body: string = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePermissions(body, requestParameters.tenantCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to retrieve all the permission capabilities in your tenant.  You can use the returned capabilities in other API calls when creating or updating permissions to assign the capability to the permission.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a list of all permission capabilities
         * @param {PermissionManagementApiGetCapabilitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCapabilities(requestParameters: PermissionManagementApiGetCapabilitiesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCapabilitiesAPIResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCapabilities(requestParameters.tenantCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to retrieve the details of a specific capability.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a permission capability\'s details
         * @param {PermissionManagementApiGetCapabilityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCapability(requestParameters: PermissionManagementApiGetCapabilityRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CapabilityDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCapability(requestParameters.capabilityId, requestParameters.tenantCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to retrieve the details of a specific content package.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a content package\'s details
         * @param {PermissionManagementApiGetContentPackageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContentPackage(requestParameters: PermissionManagementApiGetContentPackageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentPackageDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContentPackage(requestParameters.contentPackageId, requestParameters.tenantCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to retrieve the list of available content packages.  You can use the returned content packages in other API calls when creating or updating permissions to add the content package to the permission.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a list of all content packages
         * @param {PermissionManagementApiGetContentPackagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContentPackages(requestParameters: PermissionManagementApiGetContentPackagesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContentPackagesAPIResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContentPackages(requestParameters.tenantCode, requestParameters.searchString, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to retrieve the list of available data security objects.  Data security objects are analytic objects and their related objects that are available to define  permissions’ data security profiles.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a list of data security objects
         * @param {PermissionManagementApiGetDataSecurityObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataSecurityObjects(requestParameters: PermissionManagementApiGetDataSecurityObjectsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDataSecurityObjectsAPIResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataSecurityObjects(requestParameters.id, requestParameters.includeDetails, requestParameters.tenantCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to retrieve the details for a specified permission.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a permission\'s details
         * @param {PermissionManagementApiGetPermissionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermission(requestParameters: PermissionManagementApiGetPermissionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermissionDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPermission(requestParameters.permissionId, requestParameters.tenantCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to retrieve the full list of user permissions in your tenant.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a list of all permissions
         * @param {PermissionManagementApiGetPermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPermissions(requestParameters: PermissionManagementApiGetPermissionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPermissionsAPIResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPermissions(requestParameters.tenantCode, requestParameters.includeDetails, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to update existing permissions.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Update permissions
         * @param {PermissionManagementApiUpdatePermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePermissions(requestParameters: PermissionManagementApiUpdatePermissionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermissionBulkOperationResponseDTO>> {
            const permissionsListDTO: PermissionsListDTO = {
                permissions: requestParameters.permissions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePermissions(permissionsListDTO, requestParameters.tenantCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PermissionManagementApi - factory interface
 * @export
 */
export const PermissionManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PermissionManagementApiFp(configuration)
    return {
        /**
         * This API allows you to create new permissions. Administrating tenant users can specify the tenant in which to add these permissions.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Create permissions
         * @param {PermissionManagementApiCreatePermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPermissions(requestParameters: PermissionManagementApiCreatePermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<PermissionBulkOperationResponseDTO> {
            return localVarFp.createPermissions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to delete existing permissions.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Delete permissions
         * @param {PermissionManagementApiDeletePermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePermissions(requestParameters: PermissionManagementApiDeletePermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<PermissionBulkOperationResponseDTO> {
            return localVarFp.deletePermissions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to retrieve all the permission capabilities in your tenant.  You can use the returned capabilities in other API calls when creating or updating permissions to assign the capability to the permission.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a list of all permission capabilities
         * @param {PermissionManagementApiGetCapabilitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCapabilities(requestParameters: PermissionManagementApiGetCapabilitiesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetCapabilitiesAPIResponseDTO> {
            return localVarFp.getCapabilities(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to retrieve the details of a specific capability.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a permission capability\'s details
         * @param {PermissionManagementApiGetCapabilityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCapability(requestParameters: PermissionManagementApiGetCapabilityRequest, options?: AxiosRequestConfig): AxiosPromise<CapabilityDTO> {
            return localVarFp.getCapability(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to retrieve the details of a specific content package.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a content package\'s details
         * @param {PermissionManagementApiGetContentPackageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentPackage(requestParameters: PermissionManagementApiGetContentPackageRequest, options?: AxiosRequestConfig): AxiosPromise<ContentPackageDTO> {
            return localVarFp.getContentPackage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to retrieve the list of available content packages.  You can use the returned content packages in other API calls when creating or updating permissions to add the content package to the permission.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a list of all content packages
         * @param {PermissionManagementApiGetContentPackagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentPackages(requestParameters: PermissionManagementApiGetContentPackagesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetContentPackagesAPIResponseDTO> {
            return localVarFp.getContentPackages(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to retrieve the list of available data security objects.  Data security objects are analytic objects and their related objects that are available to define  permissions’ data security profiles.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a list of data security objects
         * @param {PermissionManagementApiGetDataSecurityObjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSecurityObjects(requestParameters: PermissionManagementApiGetDataSecurityObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<GetDataSecurityObjectsAPIResponseDTO> {
            return localVarFp.getDataSecurityObjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to retrieve the details for a specified permission.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a permission\'s details
         * @param {PermissionManagementApiGetPermissionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermission(requestParameters: PermissionManagementApiGetPermissionRequest, options?: AxiosRequestConfig): AxiosPromise<PermissionDTO> {
            return localVarFp.getPermission(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to retrieve the full list of user permissions in your tenant.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Retrieve a list of all permissions
         * @param {PermissionManagementApiGetPermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPermissions(requestParameters: PermissionManagementApiGetPermissionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GetPermissionsAPIResponseDTO> {
            return localVarFp.getPermissions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to update existing permissions.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
         * @summary Update permissions
         * @param {PermissionManagementApiUpdatePermissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePermissions(requestParameters: PermissionManagementApiUpdatePermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<PermissionBulkOperationResponseDTO> {
            return localVarFp.updatePermissions(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPermissions operation in PermissionManagementApi.
 * @export
 * @interface PermissionManagementApiCreatePermissionsRequest
 */
export type PermissionManagementApiCreatePermissionsRequest = {
    
    /**
    * Specify the tenant to create permissions in.
    * @type {string}
    * @memberof PermissionManagementApiCreatePermissions
    */
    readonly tenantCode?: string
    
} & PermissionsListDTO

/**
 * Request parameters for deletePermissions operation in PermissionManagementApi.
 * @export
 * @interface PermissionManagementApiDeletePermissionsRequest
 */
export type PermissionManagementApiDeletePermissionsRequest = {
    /**
    * 
    * @type {string}
    * @memberof PermissionManagementApiDeletePermissions
    */
    readonly requestBody: string
    /**
    * Specify the tenant to delete permissions from.
    * @type {string}
    * @memberof PermissionManagementApiDeletePermissions
    */
    readonly tenantCode?: string
}

/**
 * Request parameters for getCapabilities operation in PermissionManagementApi.
 * @export
 * @interface PermissionManagementApiGetCapabilitiesRequest
 */
export type PermissionManagementApiGetCapabilitiesRequest = {
    
    /**
    * Specify the tenant to retrieve the capabilities from.
    * @type {string}
    * @memberof PermissionManagementApiGetCapabilities
    */
    readonly tenantCode?: string
    
}

/**
 * Request parameters for getCapability operation in PermissionManagementApi.
 * @export
 * @interface PermissionManagementApiGetCapabilityRequest
 */
export type PermissionManagementApiGetCapabilityRequest = {
    
    /**
    * The unique identifier of the capability you want to retrieve.
    * @type {string}
    * @memberof PermissionManagementApiGetCapability
    */
    readonly capabilityId: string
    
    /**
    * Specify the tenant to retrieve a capability from.
    * @type {string}
    * @memberof PermissionManagementApiGetCapability
    */
    readonly tenantCode?: string
    
}

/**
 * Request parameters for getContentPackage operation in PermissionManagementApi.
 * @export
 * @interface PermissionManagementApiGetContentPackageRequest
 */
export type PermissionManagementApiGetContentPackageRequest = {
    
    /**
    * The unique identifier of the content package you want to retrieve.
    * @type {string}
    * @memberof PermissionManagementApiGetContentPackage
    */
    readonly contentPackageId: string
    
    /**
    * Specify the tenant to retrieve a content package from.
    * @type {string}
    * @memberof PermissionManagementApiGetContentPackage
    */
    readonly tenantCode?: string
    
}

/**
 * Request parameters for getContentPackages operation in PermissionManagementApi.
 * @export
 * @interface PermissionManagementApiGetContentPackagesRequest
 */
export type PermissionManagementApiGetContentPackagesRequest = {
    
    /**
    * Specify the tenant to retrieve the content packages from.
    * @type {string}
    * @memberof PermissionManagementApiGetContentPackages
    */
    readonly tenantCode?: string
    
    /**
    * Optional search string to return only content packages whose display name or description contains that search string.  If searchString is empty or not provided, the response returns a list of all content packages.
    * @type {string}
    * @memberof PermissionManagementApiGetContentPackages
    */
    readonly searchString?: string
    
}

/**
 * Request parameters for getDataSecurityObjects operation in PermissionManagementApi.
 * @export
 * @interface PermissionManagementApiGetDataSecurityObjectsRequest
 */
export type PermissionManagementApiGetDataSecurityObjectsRequest = {
    
    /**
    * The unique identifiers of the data security objects (analytic objects) to retrieve.  Default is all data security objects.
    * @type {Array<string>}
    * @memberof PermissionManagementApiGetDataSecurityObjects
    */
    readonly id?: Array<string>
    
    /**
    * If true, the response includes the analytic objects (display name, ID, and object type), related objects,  securable properties, and securable dimensions. If false, the response only includes analytic objects  (display name, ID, and object type). Default is false.
    * @type {boolean}
    * @memberof PermissionManagementApiGetDataSecurityObjects
    */
    readonly includeDetails?: boolean
    
    /**
    * Specify the tenant to retrieve data security objects from.
    * @type {string}
    * @memberof PermissionManagementApiGetDataSecurityObjects
    */
    readonly tenantCode?: string
    
}

/**
 * Request parameters for getPermission operation in PermissionManagementApi.
 * @export
 * @interface PermissionManagementApiGetPermissionRequest
 */
export type PermissionManagementApiGetPermissionRequest = {
    
    /**
    * The unique identifier of the permission you want to retrieve.
    * @type {string}
    * @memberof PermissionManagementApiGetPermission
    */
    readonly permissionId: string
    
    /**
    * Specify the tenant to retrieve a permission from.
    * @type {string}
    * @memberof PermissionManagementApiGetPermission
    */
    readonly tenantCode?: string
    
}

/**
 * Request parameters for getPermissions operation in PermissionManagementApi.
 * @export
 * @interface PermissionManagementApiGetPermissionsRequest
 */
export type PermissionManagementApiGetPermissionsRequest = {
    
    /**
    * Specify the tenant to retrieve the permissions from.
    * @type {string}
    * @memberof PermissionManagementApiGetPermissions
    */
    readonly tenantCode?: string
    
    /**
    * If true, returns the permission\'s details. If false, only returns the permissions\' ID, display name,  and description. Default is false.
    * @type {boolean}
    * @memberof PermissionManagementApiGetPermissions
    */
    readonly includeDetails?: boolean
    
}

/**
 * Request parameters for updatePermissions operation in PermissionManagementApi.
 * @export
 * @interface PermissionManagementApiUpdatePermissionsRequest
 */
export type PermissionManagementApiUpdatePermissionsRequest = {
    
    /**
    * Specify the tenant to update permissions in.
    * @type {string}
    * @memberof PermissionManagementApiUpdatePermissions
    */
    readonly tenantCode?: string
    
} & PermissionsListDTO

/**
 * PermissionManagementApiGenerated - object-oriented interface
 * @export
 * @class PermissionManagementApiGenerated
 * @extends {BaseAPI}
 */
export class PermissionManagementApiGenerated extends BaseAPI {
    /**
     * This API allows you to create new permissions. Administrating tenant users can specify the tenant in which to add these permissions.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
     * @summary Create permissions
     * @param {PermissionManagementApiCreatePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionManagementApiGenerated
     */
    public createPermissions(requestParameters: PermissionManagementApiCreatePermissionsRequest, options?: AxiosRequestConfig) {
        return PermissionManagementApiFp(this.configuration).createPermissions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to delete existing permissions.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
     * @summary Delete permissions
     * @param {PermissionManagementApiDeletePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionManagementApiGenerated
     */
    public deletePermissions(requestParameters: PermissionManagementApiDeletePermissionsRequest, options?: AxiosRequestConfig) {
        return PermissionManagementApiFp(this.configuration).deletePermissions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to retrieve all the permission capabilities in your tenant.  You can use the returned capabilities in other API calls when creating or updating permissions to assign the capability to the permission.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
     * @summary Retrieve a list of all permission capabilities
     * @param {PermissionManagementApiGetCapabilitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionManagementApiGenerated
     */
    public getCapabilities(requestParameters: PermissionManagementApiGetCapabilitiesRequest = {}, options?: AxiosRequestConfig) {
        return PermissionManagementApiFp(this.configuration).getCapabilities(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to retrieve the details of a specific capability.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
     * @summary Retrieve a permission capability\'s details
     * @param {PermissionManagementApiGetCapabilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionManagementApiGenerated
     */
    public getCapability(requestParameters: PermissionManagementApiGetCapabilityRequest, options?: AxiosRequestConfig) {
        return PermissionManagementApiFp(this.configuration).getCapability(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to retrieve the details of a specific content package.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
     * @summary Retrieve a content package\'s details
     * @param {PermissionManagementApiGetContentPackageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionManagementApiGenerated
     */
    public getContentPackage(requestParameters: PermissionManagementApiGetContentPackageRequest, options?: AxiosRequestConfig) {
        return PermissionManagementApiFp(this.configuration).getContentPackage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to retrieve the list of available content packages.  You can use the returned content packages in other API calls when creating or updating permissions to add the content package to the permission.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
     * @summary Retrieve a list of all content packages
     * @param {PermissionManagementApiGetContentPackagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionManagementApiGenerated
     */
    public getContentPackages(requestParameters: PermissionManagementApiGetContentPackagesRequest = {}, options?: AxiosRequestConfig) {
        return PermissionManagementApiFp(this.configuration).getContentPackages(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to retrieve the list of available data security objects.  Data security objects are analytic objects and their related objects that are available to define  permissions’ data security profiles.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
     * @summary Retrieve a list of data security objects
     * @param {PermissionManagementApiGetDataSecurityObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionManagementApiGenerated
     */
    public getDataSecurityObjects(requestParameters: PermissionManagementApiGetDataSecurityObjectsRequest, options?: AxiosRequestConfig) {
        return PermissionManagementApiFp(this.configuration).getDataSecurityObjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to retrieve the details for a specified permission.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
     * @summary Retrieve a permission\'s details
     * @param {PermissionManagementApiGetPermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionManagementApiGenerated
     */
    public getPermission(requestParameters: PermissionManagementApiGetPermissionRequest, options?: AxiosRequestConfig) {
        return PermissionManagementApiFp(this.configuration).getPermission(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to retrieve the full list of user permissions in your tenant.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
     * @summary Retrieve a list of all permissions
     * @param {PermissionManagementApiGetPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionManagementApiGenerated
     */
    public getPermissions(requestParameters: PermissionManagementApiGetPermissionsRequest = {}, options?: AxiosRequestConfig) {
        return PermissionManagementApiFp(this.configuration).getPermissions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to update existing permissions.   <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
     * @summary Update permissions
     * @param {PermissionManagementApiUpdatePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionManagementApiGenerated
     */
    public updatePermissions(requestParameters: PermissionManagementApiUpdatePermissionsRequest, options?: AxiosRequestConfig) {
        return PermissionManagementApiFp(this.configuration).updatePermissions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
